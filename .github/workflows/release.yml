---
name: Release Helm Chart

on:
  workflow_dispatch:
    inputs:
      release_title:
        description: 'Custom release title (optional)'
        required: false
        type: string
      draft:
        description: 'Create as draft release'
        required: false
        type: boolean
        default: false

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: 'v3.12.0'

      - name: Helm dependency update
        run: helm dependency update .

      - name: YAML Lint
        uses: karancode/yamllint-github-action@master
        with:
          yamllint_config_filepath: config.yamllint.yaml
          yamllint_strict: false
          yamllint_comment: true

      - name: Run chart-testing (lint)
        uses: helm/chart-testing-action@v2.6.1

      - name: Lint Helm chart
        run: ct lint --config .github/ct.yaml

  unit-test:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: 'v3.12.0'

      - name: Helm dependency update
        run: helm dependency update .

      - name: Install Helm unittest plugin
        run: |
          helm plugin install https://github.com/helm-unittest/helm-unittest.git

      - name: Run Deployment Patch Tests
        run: helm unittest --color -f tests/unit/deployment-patch_test.yaml .

      - name: Run Migration Job Patch Tests
        run: helm unittest --color -f tests/unit/migration-job-patch_test.yaml .

  security-scan:
    runs-on: ubuntu-latest
    needs: lint
    permissions:
      contents: read
      security-events: write  # Required for uploading SARIF results
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: 'v3.12.0'

      - name: Helm dependency update
        run: helm dependency update .

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          exit-code: '0'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Required for pushing commits to the repository and GitHub Pages
      pull-requests: write
      issues: write
    needs:
      - lint
      - unit-test
      - security-scan
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: 'v3.12.0'

      - name: Add dependency repositories
        run: |
          helm repo add infisical-standalone https://dl.cloudsmith.io/public/infisical/helm-charts/helm/charts/
          helm dependency update .

      - name: Extract chart information
        id: chart_info
        uses: mikefarah/yq@master
        with:
          cmd: |
            echo "name=$(yq '.name' Chart.yaml)" >> $GITHUB_OUTPUT
            echo "version=$(yq '.version' Chart.yaml)" >> $GITHUB_OUTPUT

      - name: Generate release notes
        id: release_notes
        uses: release-drafter/release-drafter@v5
        with:
          config-name: release-drafter.yml
          disable-autolabeler: false
          commitish: main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Direct approach using chart-releaser CLI
      - name: Package and Deploy Helm Chart to GitHub Pages
        run: |
          # Download and setup chart-releaser
          curl -sSLo cr.tar.gz "https://github.com/helm/chart-releaser/releases/download/v1.5.0/chart-releaser_1.5.0_linux_amd64.tar.gz"
          tar -xzf cr.tar.gz
          rm -f cr.tar.gz

          # Get repository owner and name
          owner="raulstechtips"
          repo="infisical-standalone-db-secure-wrapper"

          # Package the chart
          echo "Packaging Helm chart..."
          ./cr package .

          # Upload chart to GitHub releases
          echo "Uploading chart to GitHub releases..."
          ./cr upload \
            --owner "$owner" \
            --git-repo "$repo" \
            --token "${{ secrets.GITHUB_TOKEN }}" \
            --release-name-template "{{ .Name }}-{{ .Version }}" \
            --skip-existing=true

          # Check if gh-pages branch exists remotely
          git fetch origin
          if git ls-remote --heads origin gh-pages | grep -q 'gh-pages'; then
            echo "Using existing gh-pages branch..."
            git checkout -b gh-pages origin/gh-pages
          else
            echo "Creating gh-pages branch..."
            git checkout --orphan gh-pages
            git rm -rf .
            git commit --allow-empty -m "Create gh-pages branch"
            git push origin gh-pages
            git checkout main
          fi

          # Ensure .cr-index directory exists with proper permissions
          mkdir -p .cr-index
          touch .cr-index/index.yaml

          # Update Helm index and push to GitHub Pages
          echo "Updating Helm index..."
          ./cr index \
            --owner "$owner" \
            --git-repo "$repo" \
            --token "${{ secrets.GITHUB_TOKEN }}" \
            --charts-repo "https://${owner}.github.io/${repo}" \
            --push

      # Package the chart for GitHub Release
      - name: Package Helm Chart for GitHub Release
        id: package
        run: |
          helm package .
          PACKAGE_PATH=$(ls *.tgz)
          echo "package_path=$PACKAGE_PATH" >> $GITHUB_OUTPUT

      # Create GitHub Release
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.chart_info.outputs.name }}-${{ steps.chart_info.outputs.version }}
          name: ${{ github.event.inputs.release_title || format('{0} v{1}', steps.chart_info.outputs.name, steps.chart_info.outputs.version) }}
          body: ${{ steps.release_notes.outputs.body }}
          files: ${{ steps.package.outputs.package_path }}
          draft: ${{ github.event.inputs.draft }}
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
